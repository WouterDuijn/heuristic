, "CTRP" = c(20., 23.5, 27., 32., 41., 44., 51., 53., 55.5, 58.5, 62.5, 62.5, 65., 67.,
69.5, 72., 80., 88.5, 91., 138., 146.5, 160.5, 219.)
)
attach(thromboglobulin)
bootstrap <- function(x, statistic, B = 100., ...)
{
# returns a vector of B bootstrap values of real-valued statistic.
# statistic(x) should be R-function ; arguments of
# statistic kan be inserted on ...
# resampling is done from empirical distribution of x
y <- numeric(B)
for(j in 1.:B)
y[j] <- statistic(sample(x, replace = TRUE), ...)
y
}
qlaplace <- function(y)
{
q <- numeric(length(y))
smaller <- (y <= 0.5)
q[smaller] <- log(2. * y[smaller])
q[!smaller] <- log(2. * (1. - y[!smaller])) * (-1.)
q
}
qqlaplace <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Laplace", ylab = "Sorted Data", main="Laplace Q-Q Plot",...)
{
y <- # rid of NAs, too
sort(x)
x <- qlaplace(ppoints(y))
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab,main=main,...)
else plot(x, y, xlab = xlab, ylab = ylab,main=main,...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqcauchy <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Cauchy", ylab = "Sorted Data", main="Cauchy Q-Q Plot",...)
{
y <- # rid of NAs, too
sort(x)
x <- qcauchy(ppoints(y))
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab, main=main,...)
else plot(x, y, xlab = xlab, ylab = ylab, main=main, ...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqchisq <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Chisquare", ylab = "Sorted Data", main="Chi^2 Q-Q Plot, df=",df, ...)
{
y <- # rid of NAs, too
sort(x)
x <- qchisq(ppoints(y), df)
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab, main=paste(main,df),...)
else plot(x, y, xlab = xlab, ylab = ylab, main=paste(main,df),...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqexp <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Exp", ylab = "Sorted Data", main="Exp Q-Q Plot",...)
{
y <- # rid of NAs, too
sort(x)
x <- qexp(ppoints(y))
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab, main=main,...)
else plot(x, y, xlab = xlab, ylab = ylab,main=main, ...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqlnorm <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Lnorm", ylab = "Sorted Data", main="Lognorm Q-Q Plot",meanlog = 0., sdlog = 1., ...)
{
y <- # rid of NAs, too
sort(x)
x <- qlnorm(ppoints(y), meanlog, sdlog)
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab,main=main, ...)
else plot(x, y, xlab = xlab, ylab = ylab, main=main,...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqlogis <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Logistic", ylab = "Sorted Data", main="Logistic Q-Q Plot",...)
{
y <- # rid of NAs, too
sort(x)
x <- qlogis(ppoints(y))
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab, main=main,...)
else plot(x, y, xlab = xlab, ylab = ylab, main=main,...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqunif <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of Uniform", ylab = "Sorted Data",main="Uniform Q-Q Plot",...)
{
y <- # rid of NAs, too
sort(x)
x <- qunif(ppoints(y))
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab,main=main...)
else plot(x, y, xlab = xlab, ylab = ylab,main=main, ...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
qqt <- function(x, datax = FALSE, plot.it = TRUE, xlab = "Quantiles of t", ylab = "Sorted Data",main="t Q-Q Plot, df=", df, ...)
{
y <- # rid of NAs, too
sort(x)
x <- qt(ppoints(y), df)
if(plot.it) {
if(datax)
plot(x = y, y = x, xlab = ylab, ylab = xlab, main=paste(main,df),...)
else plot(x, y, xlab = xlab, ylab = ylab, main=paste(main,df),...)
}
else {
if(datax)
list(x = y, y = x)
else list(x = x, y = y)
}
}
symplot =  function(x,...)
{
n = length(x)
n2 = n %/% 2
sx = sort(x)
mx = median(x)
plot(mx - sx[1:n2], rev(sx)[1:n2] - mx,
xlab = "Distance Below Median",
ylab = "Distance Above Median",...)
abline(a = 0, b = 1, lty = "dotted")
}
chisquare  <-  function(x, pdist, k=0, lb=0, ub=0, breaks, ...)
{
# chisquare test for goodness of fit for data vector x and
# null hypothesis dist based on a partition of the interval (lb,ub] in k
# bins of equal width, or a partition prescribed by breaks.
# parameters of pdist can be included on ...
# output: list with components
#        chi: value of chisquare test statistic
#         pr: right-hand p-value for one-sided test for chi with
#             k-1 d.f.
#          N: vector of #observations per bin.
#         np: vector of expected number of observations
#             per bin under null hypothesis (rounded to integer part)
#
n <- length(x)
if(missing(breaks))
b <- lb + ((0.:k) * (ub - lb))/k
else {
b <- breaks
k <- length(breaks) - 1.
}
N <- table(cut(x, b))
q <- pdist(b, ...)
p <- diff(q)
chi <- sum(((N - n * p)^2.)/(n * p))
pr <- 1. - pchisq(chi, k - 1.)
np <- n * p
y <- list(chi, pr, N,np)
names(y) <- c("chisquare", "pr", "N","np")
y
}
#Distribution of SDRP --> niet nodig
par(mfrow=c(1,2), pty="s")
hist(thromboglobulin$SDRP, main="Histogram of thromboglobulin level\nfor SDRP", xlab="thromboglobulin level")
symplot(thromboglobulin$SDRP, main="Symplot of SDRP")
logData <- log(thromboglobulin$SDRP)
hist(logData, main="Histogram of the logarithm of SDRP\nthromboglobulin level", xlab="Log(thromboglobulin level)")
qqlnorm(thromboglobulin$SDRP, main="QQ-plot of lognorm for SDRP")
qqline(thromboglobulin$SDRP, distribution=qlnorm, col="red")
qqexp(thromboglobulin$SDRP, main="QQ-plot of exponential for SDRP")
qqline(thromboglobulin$SDRP, distribution=qexp, col="red")
#(a)
TnSDRPmean <- mean(thromboglobulin$SDRP) #Tn = 61.9
TstarSDRPmean <- bootstrap(thromboglobulin$SDRP, mean, B=1000.)
ZstarSDRPmean <- TstarSDRPmean - TnSDRPmean
c(TnSDRPmean - quantile(ZstarSDRPmean, 0.975),TnSDRPmean - quantile(ZstarSDRPmean, 0.025)) #C.i. = (47.07, 73.56)
#of:
2*TnSDRPmean - quantile(TstarSDRPmean,c(0.975, 0.025))
TnSDRPmean - quantile(ZstarSDRPmean, 0.025) - (TnSDRPmean - quantile(ZstarSDRPmean, 0.975))
#(b)
TnSDRPmedian <- median(thromboglobulin$SDRP) #49.5
TstarSDRPmedian <- bootstrap(thromboglobulin$SDRP, median, B=1000.)
ZstarSDRPmedian <- TstarSDRPmedian - TnSDRPmedian
c(TnSDRPmedian - quantile(ZstarSDRPmedian, 0.975), TnSDRPmedian - quantile(ZstarSDRPmedian, 0.025)) #c.i. = (34, 56)
2*TnSDRPmedian - quantile(TstarSDRPmedian,c(0.975, 0.025))
(TnSDRPmedian - quantile(ZstarSDRPmedian, 0.025)) - (TnSDRPmedian - quantile(ZstarSDRPmedian, 0.975))
#(c) ?
sd(TstarSDRPmean)
sd(TstarSDRPmedian)
#median better, smaller SD or Var and smaller c.i.
#(d)
Tn.CTRP <- median(thromboglobulin$CTRP)
Tstar.CTRP <- bootstrap(thromboglobulin$CTRP, median, B=1000.)
#SDRP - SDRP
TstarTwoSample <- TstarSDRPmedian - Tstar.CTRP
TnTwoSample <- TnSDRPmedian - Tn.CTRP
#ZstarTwoSample <- TstarSDRPmedian - Tstar.CTRP - (TnSDRPmedian - Tn.CTRP)
ZstarTwoSample <- TstarTwoSample - TnTwoSample
hist(ZstarTwoSample, main="Histogram of 1000 bootstrap values Zstar\nfor difference SDRP and CTRP", xlab="Zstar", prob=T)
c(TnTwoSample - quantile(ZstarTwoSample, 0.975), TnTwoSample - quantile(ZstarTwoSample, 0.025))
2*TnTwoSample - quantile(TstarTwoSample, c(0.975, 0.025))#c.i. = (-29.5, 2.0)
#0 in interval confirms the doubt about the existence of a systematic difference between the two groups of patients
# the observed difference can very well be the result of chance
theoreticalVariance <- 1/(50*52) #1/(n(n+2)), 0.000385
n <- 20
estimateVarTn <- numeric(n)
for(i in 1:n) {
sample <- runif(50)
Tstar <- bootstrap(sample, TnEstimator, B=1000.)
estimateVarTn[i] <- var(Tstar)
}
bootstrap <- function(x, statistic, B = 100., ...)
{
y <- numeric(B)
for(j in 1.:B)
y[j] <- statistic(sample(x, replace = TRUE), ...)
y
}
TnEstimator <- function(x) {
Tn <- ((length(x)+1) / length(x)) * max(x)
Tn
}
sample <- runif(50)
var(bootstrap(sample, TnEstimator, B=1000.)) #0.0006
n <- 20
estimateVarTn <- numeric(n)
for(i in 1:n) {
sample <- runif(50)
Tstar <- bootstrap(sample, TnEstimator, B=1000.)
estimateVarTn[i] <- var(Tstar)
}
estimateVarTn
hist(estimateVarTn)
mean(estimateVarTn - theoreticalVariance) #0.00017
B <- 1000
estimateVarTn2 <- numeric(n)
Tstar2 <- numeric(B)
for(j in 1:n) {
sample <- runif(50)
theta <- TnEstimator(sample)
for(i in 1:B) {
xstar2 <- runif(50,0,theta)
Tstar2[i] <- TnEstimator(xstar2)
}
estimateVarTn2[j] <- var(Tstar2)
}
mean(estimateVarTn2 - theoreticalVariance) #1.36e-06
library(readxl)
TrainingSet <- read_excel("C:/Users/Daffieduck/Downloads/TrainingSet.xlsx")
View(TrainingSet)
finalData <- as.data.frame(TrainingSet)
finalData$noFee <- as.integer(finalData$noFee)
finalData$hardwoodFloors <- as.integer(finalData$hardwoodFloors)
finalData$priceBin <- as.integer(finalData$priceBin)
finalData$createdHours <- as.integer(finalData$createdHours)
finalData$buildingId <- as.integer(finalData$buildingId)
finalData$`low vs rest` <- NULL
finalData$`High vs rest` <- NULL
finalData$interestBin <- as.factor(finalData$interestBin)
library(dplyr)
install.packages("dplyr")
library(dplyr)
allLow = filter(finalData,finalData$interestBin == 0)
allMedium=filter(finalData,finalData$interestBin == 1)
allHigh=filter(finalData,finalData$interestBin == 2)
indexToBeSampledHigh=sample(1:3839,(34284-3839),replace=TRUE)
indexToBeSampledMedium=sample(1:11229,(34284-11229),replace=TRUE)
sampledHigh=allHigh[indexToBeSampledHigh,]
sampledMedium=allMedium[indexToBeSampledMedium,]
upsample=rbind(finalData,sampledHigh,sampledMedium)
finalData <- as.data.frame(TrainingSet)
allMedium=filter(finalData,finalData$interestBin == 1)
?sample
37014 - 2809
?ks.test
quantiles <- c(0:1, 100)
?c
?seq
quantiles <- seq(0,1,0.01)
/rnorm
?rnorm
sample <- rnorm(10)
%quantiles <- q(quantiles)
qpoints <- seq(0,1,0.01)
sample <- rnorm(10)
quantiles <- q(quantiles)
quantiles <- qnorm(quantiles)
quantiles
qnorm(0.5)
q <- quantiles(qpoints, qpoints, names=TRUE)
q <- quantile(qpoints, qpoints, names=TRUE)
q
q <- quantile(sample, qpoints, names=TRUE)
q
qpoints <- seq(0,1,0.05)
sample <- rnorm(10)
q <- quantile(sample, qpoints, names=TRUE)
q
sample
setwd("C:/workspace/heuristic/SimulatedAnnealing")
# highest profit
temp_10000_CR_0.003_1 <- read.table("Schedule_1_Temp_10000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_10000_CR_0.003_2 <- read.table("Schedule_2_Temp_10000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_10000_CR_0.003_3 <- read.table("Schedule_3_Temp_10000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_10000_CR_0.003_4 <- read.table("Schedule_4_Temp_10000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_10000_CR_0.003_5 <- read.table("Schedule_5_Temp_10000.0_CR_0.003.txt", header=FALSE, sep="\t")
plot(temp_10000_CR_0.003_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_10000_CR_0.003_2, col='blue')
lines(temp_10000_CR_0.003_3, col='red')
lines(temp_10000_CR_0.003_4, col='pink')
lines(temp_10000_CR_0.003_5, col='green')
temp_10000_CR_0.005_1 <- read.table("Schedule_1_Temp_10000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_10000_CR_0.005_2 <- read.table("Schedule_2_Temp_10000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_10000_CR_0.005_3 <- read.table("Schedule_3_Temp_10000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_10000_CR_0.005_4 <- read.table("Schedule_4_Temp_10000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_10000_CR_0.005_5 <- read.table("Schedule_5_Temp_10000.0_CR_0.005.txt", header=FALSE, sep="\t")
plot(temp_10000_CR_0.005_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_10000_CR_0.005_2, col='blue')
lines(temp_10000_CR_0.005_3, col='red')
lines(temp_10000_CR_0.005_4, col='pink')
lines(temp_10000_CR_0.005_5, col='green')
temp_100000_CR_0.003_1 <- read.table("Schedule_1_Temp_100000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_100000_CR_0.003_2 <- read.table("Schedule_2_Temp_100000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_100000_CR_0.003_3 <- read.table("Schedule_3_Temp_100000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_100000_CR_0.003_4 <- read.table("Schedule_4_Temp_100000.0_CR_0.003.txt", header=FALSE, sep="\t")
temp_100000_CR_0.003_5 <- read.table("Schedule_5_Temp_100000.0_CR_0.003.txt", header=FALSE, sep="\t")
plot(temp_100000_CR_0.003_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_100000_CR_0.003_2, col='blue')
lines(temp_100000_CR_0.003_3, col='red')
lines(temp_100000_CR_0.003_4, col='pink')
lines(temp_100000_CR_0.003_5, col='green')
temp_300000_CR_0.005_1 <- read.table("Schedule_1_Temp_300000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_300000_CR_0.005_2 <- read.table("Schedule_2_Temp_300000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_300000_CR_0.005_3 <- read.table("Schedule_3_Temp_300000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_300000_CR_0.005_4 <- read.table("Schedule_4_Temp_300000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_300000_CR_0.005_5 <- read.table("Schedule_5_Temp_300000.0_CR_0.005.txt", header=FALSE, sep="\t")
plot(temp_300000_CR_0.005_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_300000_CR_0.005_2, col='blue')
lines(temp_300000_CR_0.005_3, col='red')
lines(temp_300000_CR_0.005_4, col='pink')
lines(temp_300000_CR_0.005_5, col='green')
temp_1000000_CR_0.005_1 <- read.table("Schedule_1_Temp_1000000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.005_2 <- read.table("Schedule_2_Temp_1000000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.005_3 <- read.table("Schedule_3_Temp_1000000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.005_4 <- read.table("Schedule_4_Temp_1000000.0_CR_0.005.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.005_5 <- read.table("Schedule_5_Temp_1000000.0_CR_0.005.txt", header=FALSE, sep="\t")
plot(temp_1000000_CR_0.005_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_1000000_CR_0.005_2, col='blue')
lines(temp_1000000_CR_0.005_3, col='red')
lines(temp_1000000_CR_0.005_4, col='pink')
lines(temp_1000000_CR_0.005_5, col='green')
#adjusting cooling rate
temp_10000_CR_0.01_1 <- read.table("Schedule_1_Temp_10000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_10000_CR_0.01_2 <- read.table("Schedule_2_Temp_10000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_10000_CR_0.01_3 <- read.table("Schedule_3_Temp_10000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_10000_CR_0.01_4 <- read.table("Schedule_4_Temp_10000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_10000_CR_0.01_5 <- read.table("Schedule_5_Temp_10000.0_CR_0.01.txt", header=FALSE, sep="\t")
plot(temp_10000_CR_0.01_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_10000_CR_0.01_2, col='blue')
lines(temp_10000_CR_0.01_3, col='red')
lines(temp_10000_CR_0.01_4, col='pink')
lines(temp_10000_CR_0.01_5, col='green')
temp_1000000_CR_0.01_1 <- read.table("Schedule_1_Temp_1000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.01_2 <- read.table("Schedule_2_Temp_1000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.01_3 <- read.table("Schedule_3_Temp_1000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.01_4 <- read.table("Schedule_4_Temp_1000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000000_CR_0.01_5 <- read.table("Schedule_5_Temp_1000000.0_CR_0.01.txt", header=FALSE, sep="\t")
plot(temp_1000000_CR_0.01_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_1000000_CR_0.01_2, col='blue')
lines(temp_1000000_CR_0.01_3, col='red')
lines(temp_1000000_CR_0.01_4, col='pink')
lines(temp_1000000_CR_0.01_5, col='green')
temp_1000_CR_0.01_1 <- read.table("Schedule_1_Temp_1000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000_CR_0.01_2 <- read.table("Schedule_2_Temp_1000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000_CR_0.01_3 <- read.table("Schedule_3_Temp_1000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000_CR_0.01_4 <- read.table("Schedule_4_Temp_1000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_1000_CR_0.01_5 <- read.table("Schedule_5_Temp_1000.0_CR_0.01.txt", header=FALSE, sep="\t")
plot(temp_1000_CR_0.01_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_1000_CR_0.01_2, col='blue')
lines(temp_1000_CR_0.01_3, col='red')
lines(temp_1000_CR_0.01_4, col='pink')
lines(temp_1000_CR_0.01_5, col='green')
temp_3000000_CR_0.01_1 <- read.table("Schedule_1_Temp_3000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_3000000_CR_0.01_2 <- read.table("Schedule_2_Temp_3000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_3000000_CR_0.01_3 <- read.table("Schedule_3_Temp_3000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_3000000_CR_0.01_4 <- read.table("Schedule_4_Temp_3000000.0_CR_0.01.txt", header=FALSE, sep="\t")
temp_3000000_CR_0.01_5 <- read.table("Schedule_5_Temp_3000000.0_CR_0.01.txt", header=FALSE, sep="\t")
plot(temp_3000000_CR_0.01_1, xlab="Mutation", ylab="Profit (???)", type='l')
lines(temp_3000000_CR_0.01_2, col='blue')
lines(temp_3000000_CR_0.01_3, col='red')
lines(temp_3000000_CR_0.01_4, col='pink')
lines(temp_3000000_CR_0.01_5, col='green')
#Hill climber restart
setwd("C:/workspace/heuristic/HillClimberRestart")
#NO_IMPROVEMENT_ITERATIONS = 10,000
init_20_rr_1000_1 <- read.table("HCRestart_Schedule_1_initialschedules_20_randomroutes_1000.txt", header=FALSE, sep="\t")
init_20_rr_1000_2 <- read.table("HCRestart_Schedule_2_initialschedules_20_randomroutes_1000.txt", header=FALSE, sep="\t")
init_20_rr_1000_3 <- read.table("HCRestart_Schedule_3_initialschedules_20_randomroutes_1000.txt", header=FALSE, sep="\t")
init_20_rr_1000_4 <- read.table("HCRestart_Schedule_4_initialschedules_20_randomroutes_1000.txt", header=FALSE, sep="\t")
init_20_rr_1000_5 <- read.table("HCRestart_Schedule_5_initialschedules_20_randomroutes_1000.txt", header=FALSE, sep="\t")
#plot(init_20_rr_1000_1, xlab="Mutation", ylab="Profit (???)", type='l', lty=3, main="Hill Climber Restart Scores", col="blue",
#     yaxt="n", xaxt = "n")
plot(init_20_rr_1000_1, type='l', lty=3, col="blue",
yaxt="n", xaxt = "n", xlab="", ylab="")
axis(2, cex.axis=1.25)
axis(1, cex.axis=1.5)
mtext("Mutation", side=1, line=2.2, cex=1.5)
mtext("Profit (???)", side=2, line=2.2, cex=1.5)
title(main=, "Hill Climber Restart Scores", cex.main=2)
lines(init_20_rr_1000_2, col='black')
lines(init_20_rr_1000_3, col='red')
lines(init_20_rr_1000_4, col='pink')
lines(init_20_rr_1000_5, col='green')
# NO_IMPROVEMENT_ITERATIONS = 1,000
init_20_rr_10000_1 <- read.table("HCRestart_Schedule_1_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_2 <- read.table("HCRestart_Schedule_2_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_3 <- read.table("HCRestart_Schedule_3_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_4 <- read.table("HCRestart_Schedule_4_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_5 <- read.table("HCRestart_Schedule_5_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_6 <- read.table("HCRestart_Schedule_6_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_7 <- read.table("HCRestart_Schedule_7_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_8 <- read.table("HCRestart_Schedule_8_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_9 <- read.table("HCRestart_Schedule_9_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_10 <- read.table("HCRestart_Schedule_10_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_11 <- read.table("HCRestart_Schedule_11_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_12 <- read.table("HCRestart_Schedule_12_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_13 <- read.table("HCRestart_Schedule_13_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_14 <- read.table("HCRestart_Schedule_14_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_15 <- read.table("HCRestart_Schedule_15_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_16 <- read.table("HCRestart_Schedule_16_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_17 <- read.table("HCRestart_Schedule_17_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_18 <- read.table("HCRestart_Schedule_18_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_19 <- read.table("HCRestart_Schedule_19_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_20 <- read.table("HCRestart_Schedule_20_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
max(init_20_rr_10000_1$V2, init_20_rr_10000_2$V2,init_20_rr_10000_3$V2,init_20_rr_10000_4$V2,init_20_rr_10000_5$V2,
init_20_rr_10000_6$V2,init_20_rr_10000_7$V2,init_20_rr_10000_8$V2,init_20_rr_10000_9$V2,init_20_rr_10000_10$V2,
init_20_rr_10000_11$V2,init_20_rr_10000_12$V2,init_20_rr_10000_13$V2,init_20_rr_10000_14$V2,init_20_rr_10000_15$V2,
init_20_rr_10000_16$V2,init_20_rr_10000_17$V2,init_20_rr_10000_18$V2,init_20_rr_10000_19$V2,init_20_rr_10000_20$V2)
plot(init_20_rr_10000_3, type='l', lty=3, col="blue",
yaxt="n", xaxt = "n", xlab="", ylab="")
axis(2, cex.axis=1.25)
axis(1, cex.axis=1.5)
mtext("Mutation", side=1, line=2.2, cex=1.5)
mtext("Profit (???)", side=2, line=2.2, cex=1.5)
title(main=, "Hill Climber Restart Scores", cex.main=2)
#plot(init_20_rr_10000_1, xlab="Mutation", ylab="Profit (???)", type='l', lty=3, main="Hill climber restart scores")
lines(init_20_rr_10000_2, col='black', lty=3)
lines(init_20_rr_10000_1, col='red', lty=3)
lines(init_20_rr_10000_4, col='pink', lty=3)
lines(init_20_rr_10000_5, col='green', lty=3)
# NO_IMPROVEMENT_ITERATIONS = 100
init_20_rr_10000_1.2 <- read.table("HCRestart_Schedule_1_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_2.2 <- read.table("HCRestart_Schedule_2_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_3.2 <- read.table("HCRestart_Schedule_3_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_4.2 <- read.table("HCRestart_Schedule_4_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
init_20_rr_10000_5.2 <- read.table("HCRestart_Schedule_5_initialschedules_20_randomroutes_10000.txt", header=FALSE, sep="\t")
plot(init_20_rr_10000_1.2, type='l', lty=3, col="blue",
yaxt="n", xaxt = "n", xlab="", ylab="")
axis(2, cex.axis=1.25)
axis(1, cex.axis=1.5)
mtext("Mutation", side=1, line=2.2, cex=1.5)
mtext("Profit (???)", side=2, line=2.2, cex=1.5)
title(main=, "Hill Climber Restart Scores", cex.main=2)
#plot(init_20_rr_10000_1.2, xlab="Mutation", ylab="Profit (???)", type='l', lty=3, main="Hill climber restart scores")
lines(init_20_rr_10000_2.2, col='black', lty=3)
lines(init_20_rr_10000_3.2, col='red', lty=3)
lines(init_20_rr_10000_4.2, col='pink', lty=3)
lines(init_20_rr_10000_5.2, col='green', lty=3)
plot(init_20_rr_10000_3.2, type='l', col="blue",
yaxt="n", xaxt = "n", xlab="", ylab="")
axis(2, cex.axis=1.25)
axis(1, cex.axis=1.5)
mtext("Mutation", side=1, line=2.2, cex=1.5)
mtext("Profit (???)", side=2, line=2.2, cex=1.5)
title(main=, "Hill Climber Restart Scores", cex.main=2)
#plot(init_20_rr_10000_1.2, xlab="Mutation", ylab="Profit (???)", type='l', lty=3, main="Hill climber restart scores")
lines(init_20_rr_10000_2.2, col='black')
lines(init_20_rr_10000_1.2, col='red')
lines(init_20_rr_10000_4.2, col='pink')
lines(init_20_rr_10000_5.2, col='green')
